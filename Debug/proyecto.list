
proyecto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000359c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003724  08003724  00004724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003774  08003774  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003774  08003774  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003774  08003774  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003774  08003774  00004774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003778  08003778  00004778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800377c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000b0  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009dc4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000185f  00000000  00000000  0000ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  00010660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000575  00000000  00000000  00010d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a1f  00000000  00000000  000112f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e1b  00000000  00000000  0002ad14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096f45  00000000  00000000  00034b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cba74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bec  00000000  00000000  000cbab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000cd6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800370c 	.word	0x0800370c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800370c 	.word	0x0800370c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa80 	bl	80006d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f858 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8c2 	bl	800035c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f890 	bl	80002fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_buff, 4);
 80001dc:	2204      	movs	r2, #4
 80001de:	4923      	ldr	r1, [pc, #140]	@ (800026c <main+0xa4>)
 80001e0:	4823      	ldr	r0, [pc, #140]	@ (8000270 <main+0xa8>)
 80001e2:	f002 f901 	bl	80023e8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(serial_LED_start==1){
 80001e6:	4b23      	ldr	r3, [pc, #140]	@ (8000274 <main+0xac>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d112      	bne.n	8000214 <main+0x4c>
		  serial_LED_start=0;
 80001ee:	4b21      	ldr	r3, [pc, #132]	@ (8000274 <main+0xac>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 80001f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001fc:	f000 fe0a 	bl	8000e14 <HAL_GPIO_TogglePin>
		  HAL_Delay(2000);
 8000200:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000204:	f000 faca 	bl	800079c <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000208:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800020c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000210:	f000 fe00 	bl	8000e14 <HAL_GPIO_TogglePin>
	  }
	  if (serial_LED1==1){
 8000214:	4b18      	ldr	r3, [pc, #96]	@ (8000278 <main+0xb0>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d10e      	bne.n	800023a <main+0x72>
	  		  serial_LED1=0;
 800021c:	4b16      	ldr	r3, [pc, #88]	@ (8000278 <main+0xb0>)
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000222:	2120      	movs	r1, #32
 8000224:	4815      	ldr	r0, [pc, #84]	@ (800027c <main+0xb4>)
 8000226:	f000 fdf5 	bl	8000e14 <HAL_GPIO_TogglePin>
	  		  HAL_Delay(1000);
 800022a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022e:	f000 fab5 	bl	800079c <HAL_Delay>
	  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000232:	2120      	movs	r1, #32
 8000234:	4811      	ldr	r0, [pc, #68]	@ (800027c <main+0xb4>)
 8000236:	f000 fded 	bl	8000e14 <HAL_GPIO_TogglePin>
	  	  }
	  	  if(serial_LED2 ==1){
 800023a:	4b11      	ldr	r3, [pc, #68]	@ (8000280 <main+0xb8>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b01      	cmp	r3, #1
 8000240:	d1d1      	bne.n	80001e6 <main+0x1e>
	  		  serial_LED2=0;
 8000242:	4b0f      	ldr	r3, [pc, #60]	@ (8000280 <main+0xb8>)
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800024c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000250:	f000 fde0 	bl	8000e14 <HAL_GPIO_TogglePin>
	  		  HAL_Delay(1000);
 8000254:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000258:	f000 faa0 	bl	800079c <HAL_Delay>
	  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800025c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000260:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000264:	f000 fdd6 	bl	8000e14 <HAL_GPIO_TogglePin>
	  if(serial_LED_start==1){
 8000268:	e7bd      	b.n	80001e6 <main+0x1e>
 800026a:	bf00      	nop
 800026c:	200000b0 	.word	0x200000b0
 8000270:	20000028 	.word	0x20000028
 8000274:	200000b6 	.word	0x200000b6
 8000278:	200000b4 	.word	0x200000b4
 800027c:	48000400 	.word	0x48000400
 8000280:	200000b5 	.word	0x200000b5

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b090      	sub	sp, #64	@ 0x40
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2228      	movs	r2, #40	@ 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f003 f9fc 	bl	8003690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a6:	2302      	movs	r3, #2
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ae:	2310      	movs	r3, #16
 80002b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b2:	2300      	movs	r3, #0
 80002b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fde8 	bl	8000e90 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002c6:	f000 f909 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fe12 	bl	8001f0c <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ee:	f000 f8f5 	bl	80004dc <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3740      	adds	r7, #64	@ 0x40
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000300:	4b14      	ldr	r3, [pc, #80]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000302:	4a15      	ldr	r2, [pc, #84]	@ (8000358 <MX_USART2_UART_Init+0x5c>)
 8000304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000306:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800030c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800030e:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000314:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000322:	220c      	movs	r2, #12
 8000324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800032c:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000332:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000334:	2200      	movs	r2, #0
 8000336:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000338:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 800033a:	2200      	movs	r2, #0
 800033c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	@ (8000354 <MX_USART2_UART_Init+0x58>)
 8000340:	f002 f804 	bl	800234c <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800034a:	f000 f8c7 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000028 	.word	0x20000028
 8000358:	40004400 	.word	0x40004400

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b39      	ldr	r3, [pc, #228]	@ (8000458 <MX_GPIO_Init+0xfc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a38      	ldr	r2, [pc, #224]	@ (8000458 <MX_GPIO_Init+0xfc>)
 8000378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b36      	ldr	r3, [pc, #216]	@ (8000458 <MX_GPIO_Init+0xfc>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038a:	4b33      	ldr	r3, [pc, #204]	@ (8000458 <MX_GPIO_Init+0xfc>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a32      	ldr	r2, [pc, #200]	@ (8000458 <MX_GPIO_Init+0xfc>)
 8000390:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b30      	ldr	r3, [pc, #192]	@ (8000458 <MX_GPIO_Init+0xfc>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 80003a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ac:	f000 fd1a 	bl	8000de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2128      	movs	r1, #40	@ 0x28
 80003b4:	4829      	ldr	r0, [pc, #164]	@ (800045c <MX_GPIO_Init+0x100>)
 80003b6:	f000 fd15 	bl	8000de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80003ba:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80003be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c0:	2301      	movs	r3, #1
 80003c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003cc:	f107 030c 	add.w	r3, r7, #12
 80003d0:	4619      	mov	r1, r3
 80003d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003d6:	f000 fb93 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	f107 030c 	add.w	r3, r7, #12
 80003ee:	4619      	mov	r1, r3
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f4:	f000 fb84 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80003f8:	2328      	movs	r3, #40	@ 0x28
 80003fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000408:	f107 030c 	add.w	r3, r7, #12
 800040c:	4619      	mov	r1, r3
 800040e:	4813      	ldr	r0, [pc, #76]	@ (800045c <MX_GPIO_Init+0x100>)
 8000410:	f000 fb76 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000414:	2310      	movs	r3, #16
 8000416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000418:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800041c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800041e:	2301      	movs	r3, #1
 8000420:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	4619      	mov	r1, r3
 8000428:	480c      	ldr	r0, [pc, #48]	@ (800045c <MX_GPIO_Init+0x100>)
 800042a:	f000 fb69 	bl	8000b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	2100      	movs	r1, #0
 8000432:	200a      	movs	r0, #10
 8000434:	f000 fab1 	bl	800099a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000438:	200a      	movs	r0, #10
 800043a:	f000 faca 	bl	80009d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	2028      	movs	r0, #40	@ 0x28
 8000444:	f000 faa9 	bl	800099a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000448:	2028      	movs	r0, #40	@ 0x28
 800044a:	f000 fac2 	bl	80009d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800044e:	bf00      	nop
 8000450:	3720      	adds	r7, #32
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000
 800045c:	48000400 	.word	0x48000400

08000460 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 HAL_UART_Receive_IT(&huart2, rx_buff, 4);
 8000468:	2204      	movs	r2, #4
 800046a:	4914      	ldr	r1, [pc, #80]	@ (80004bc <HAL_UART_RxCpltCallback+0x5c>)
 800046c:	4814      	ldr	r0, [pc, #80]	@ (80004c0 <HAL_UART_RxCpltCallback+0x60>)
 800046e:	f001 ffbb 	bl	80023e8 <HAL_UART_Receive_IT>
 if (strncmp((char *)rx_buff, "LED1", 4) == 0)
 8000472:	2204      	movs	r2, #4
 8000474:	4913      	ldr	r1, [pc, #76]	@ (80004c4 <HAL_UART_RxCpltCallback+0x64>)
 8000476:	4811      	ldr	r0, [pc, #68]	@ (80004bc <HAL_UART_RxCpltCallback+0x5c>)
 8000478:	f003 f912 	bl	80036a0 <strncmp>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d102      	bne.n	8000488 <HAL_UART_RxCpltCallback+0x28>
 {
 serial_LED1 = 1;
 8000482:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <HAL_UART_RxCpltCallback+0x68>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
 }
 if (strncmp((char *)rx_buff, "LED2", 4) == 0)
 8000488:	2204      	movs	r2, #4
 800048a:	4910      	ldr	r1, [pc, #64]	@ (80004cc <HAL_UART_RxCpltCallback+0x6c>)
 800048c:	480b      	ldr	r0, [pc, #44]	@ (80004bc <HAL_UART_RxCpltCallback+0x5c>)
 800048e:	f003 f907 	bl	80036a0 <strncmp>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <HAL_UART_RxCpltCallback+0x3e>
 {
 serial_LED2 = 1;
 8000498:	4b0d      	ldr	r3, [pc, #52]	@ (80004d0 <HAL_UART_RxCpltCallback+0x70>)
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
 }
 if(strncmp((char *)rx_buff, "START", 4) == 0){
 800049e:	2204      	movs	r2, #4
 80004a0:	490c      	ldr	r1, [pc, #48]	@ (80004d4 <HAL_UART_RxCpltCallback+0x74>)
 80004a2:	4806      	ldr	r0, [pc, #24]	@ (80004bc <HAL_UART_RxCpltCallback+0x5c>)
 80004a4:	f003 f8fc 	bl	80036a0 <strncmp>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d102      	bne.n	80004b4 <HAL_UART_RxCpltCallback+0x54>
	 serial_LED_start=1;
 80004ae:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <HAL_UART_RxCpltCallback+0x78>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 }
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	200000b0 	.word	0x200000b0
 80004c0:	20000028 	.word	0x20000028
 80004c4:	08003724 	.word	0x08003724
 80004c8:	200000b4 	.word	0x200000b4
 80004cc:	0800372c 	.word	0x0800372c
 80004d0:	200000b5 	.word	0x200000b5
 80004d4:	08003734 	.word	0x08003734
 80004d8:	200000b6 	.word	0x200000b6

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <Error_Handler+0x8>

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <HAL_MspInit+0x44>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <HAL_MspInit+0x44>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6193      	str	r3, [r2, #24]
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <HAL_MspInit+0x44>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <HAL_MspInit+0x44>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <HAL_MspInit+0x44>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <HAL_MspInit+0x44>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	@ 0x28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a1c      	ldr	r2, [pc, #112]	@ (80005c0 <HAL_UART_MspInit+0x90>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d131      	bne.n	80005b6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000552:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <HAL_UART_MspInit+0x94>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	4a1b      	ldr	r2, [pc, #108]	@ (80005c4 <HAL_UART_MspInit+0x94>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800055c:	61d3      	str	r3, [r2, #28]
 800055e:	4b19      	ldr	r3, [pc, #100]	@ (80005c4 <HAL_UART_MspInit+0x94>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <HAL_UART_MspInit+0x94>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a15      	ldr	r2, [pc, #84]	@ (80005c4 <HAL_UART_MspInit+0x94>)
 8000570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <HAL_UART_MspInit+0x94>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000582:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000588:	2302      	movs	r3, #2
 800058a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000590:	2303      	movs	r3, #3
 8000592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000594:	2307      	movs	r3, #7
 8000596:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a2:	f000 faad 	bl	8000b00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2026      	movs	r0, #38	@ 0x26
 80005ac:	f000 f9f5 	bl	800099a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005b0:	2026      	movs	r0, #38	@ 0x26
 80005b2:	f000 fa0e 	bl	80009d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	@ 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40004400 	.word	0x40004400
 80005c4:	40021000 	.word	0x40021000

080005c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <NMI_Handler+0x4>

080005d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <HardFault_Handler+0x4>

080005d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <MemManage_Handler+0x4>

080005e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <UsageFault_Handler+0x4>

080005f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800061e:	f000 f89d 	bl	800075c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}

08000626 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800062a:	2010      	movs	r0, #16
 800062c:	f000 fc0c 	bl	8000e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <USART2_IRQHandler+0x10>)
 800063a:	f001 ff19 	bl	8002470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000028 	.word	0x20000028

08000648 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800064c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000650:	f000 fbfa 	bl	8000e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <SystemInit+0x20>)
 800065e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000662:	4a05      	ldr	r2, [pc, #20]	@ (8000678 <SystemInit+0x20>)
 8000664:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000668:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800067c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000680:	f7ff ffea 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480c      	ldr	r0, [pc, #48]	@ (80006b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000686:	490d      	ldr	r1, [pc, #52]	@ (80006bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000688:	4a0d      	ldr	r2, [pc, #52]	@ (80006c0 <LoopForever+0xe>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800069c:	4c0a      	ldr	r4, [pc, #40]	@ (80006c8 <LoopForever+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006aa:	f003 f80b 	bl	80036c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ae:	f7ff fd8b 	bl	80001c8 <main>

080006b2 <LoopForever>:

LoopForever:
    b LoopForever
 80006b2:	e7fe      	b.n	80006b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c0:	0800377c 	.word	0x0800377c
  ldr r2, =_sbss
 80006c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c8:	200000bc 	.word	0x200000bc

080006cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC1_2_IRQHandler>
	...

080006d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <HAL_Init+0x28>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a07      	ldr	r2, [pc, #28]	@ (80006f8 <HAL_Init+0x28>)
 80006da:	f043 0310 	orr.w	r3, r3, #16
 80006de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f000 f94f 	bl	8000984 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e6:	200f      	movs	r0, #15
 80006e8:	f000 f808 	bl	80006fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ec:	f7ff fefc 	bl	80004e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40022000 	.word	0x40022000

080006fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <HAL_InitTick+0x54>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <HAL_InitTick+0x58>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4619      	mov	r1, r3
 800070e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000712:	fbb3 f3f1 	udiv	r3, r3, r1
 8000716:	fbb2 f3f3 	udiv	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f967 	bl	80009ee <HAL_SYSTICK_Config>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e00e      	b.n	8000748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d80a      	bhi.n	8000746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f000 f92f 	bl	800099a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800073c:	4a06      	ldr	r2, [pc, #24]	@ (8000758 <HAL_InitTick+0x5c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	e000      	b.n	8000748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000000 	.word	0x20000000
 8000754:	20000008 	.word	0x20000008
 8000758:	20000004 	.word	0x20000004

0800075c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_IncTick+0x20>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <HAL_IncTick+0x24>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	4a04      	ldr	r2, [pc, #16]	@ (8000780 <HAL_IncTick+0x24>)
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000008 	.word	0x20000008
 8000780:	200000b8 	.word	0x200000b8

08000784 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return uwTick;  
 8000788:	4b03      	ldr	r3, [pc, #12]	@ (8000798 <HAL_GetTick+0x14>)
 800078a:	681b      	ldr	r3, [r3, #0]
}
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	200000b8 	.word	0x200000b8

0800079c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007a4:	f7ff ffee 	bl	8000784 <HAL_GetTick>
 80007a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b4:	d005      	beq.n	80007c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <HAL_Delay+0x44>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4413      	add	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007c2:	bf00      	nop
 80007c4:	f7ff ffde 	bl	8000784 <HAL_GetTick>
 80007c8:	4602      	mov	r2, r0
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d8f7      	bhi.n	80007c4 <HAL_Delay+0x28>
  {
  }
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000008 	.word	0x20000008

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0b      	blt.n	8000872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f003 021f 	and.w	r2, r3, #31
 8000860:	4907      	ldr	r1, [pc, #28]	@ (8000880 <__NVIC_EnableIRQ+0x38>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	2001      	movs	r0, #1
 800086a:	fa00 f202 	lsl.w	r2, r0, r2
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000e100 	.word	0xe000e100

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	db0a      	blt.n	80008ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	490c      	ldr	r1, [pc, #48]	@ (80008d0 <__NVIC_SetPriority+0x4c>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ac:	e00a      	b.n	80008c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4908      	ldr	r1, [pc, #32]	@ (80008d4 <__NVIC_SetPriority+0x50>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	3b04      	subs	r3, #4
 80008bc:	0112      	lsls	r2, r2, #4
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	440b      	add	r3, r1
 80008c2:	761a      	strb	r2, [r3, #24]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b089      	sub	sp, #36	@ 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f1c3 0307 	rsb	r3, r3, #7
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	bf28      	it	cs
 80008f6:	2304      	movcs	r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3304      	adds	r3, #4
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d902      	bls.n	8000908 <NVIC_EncodePriority+0x30>
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3b03      	subs	r3, #3
 8000906:	e000      	b.n	800090a <NVIC_EncodePriority+0x32>
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43da      	mvns	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000920:	f04f 31ff 	mov.w	r1, #4294967295
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43d9      	mvns	r1, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	4313      	orrs	r3, r2
         );
}
 8000932:	4618      	mov	r0, r3
 8000934:	3724      	adds	r7, #36	@ 0x24
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000950:	d301      	bcc.n	8000956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000952:	2301      	movs	r3, #1
 8000954:	e00f      	b.n	8000976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000956:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <SysTick_Config+0x40>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095e:	210f      	movs	r1, #15
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f7ff ff8e 	bl	8000884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <SysTick_Config+0x40>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096e:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <SysTick_Config+0x40>)
 8000970:	2207      	movs	r2, #7
 8000972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	e000e010 	.word	0xe000e010

08000984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ff29 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ac:	f7ff ff3e 	bl	800082c <__NVIC_GetPriorityGrouping>
 80009b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	6978      	ldr	r0, [r7, #20]
 80009b8:	f7ff ff8e 	bl	80008d8 <NVIC_EncodePriority>
 80009bc:	4602      	mov	r2, r0
 80009be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff5d 	bl	8000884 <__NVIC_SetPriority>
}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff31 	bl	8000848 <__NVIC_EnableIRQ>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ffa2 	bl	8000940 <SysTick_Config>
 80009fc:	4603      	mov	r3, r0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d101      	bne.n	8000a18 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e02e      	b.n	8000a76 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d008      	beq.n	8000a34 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2204      	movs	r2, #4
 8000a26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e020      	b.n	8000a76 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f022 020e 	bic.w	r2, r2, #14
 8000a42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f022 0201 	bic.w	r2, r2, #1
 8000a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a62:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d005      	beq.n	8000aa4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	73fb      	strb	r3, [r7, #15]
 8000aa2:	e027      	b.n	8000af4 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 020e 	bic.w	r2, r2, #14
 8000ab2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f022 0201 	bic.w	r2, r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	4798      	blx	r3
    }
  }
  return status;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0e:	e14e      	b.n	8000dae <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8140 	beq.w	8000da8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d005      	beq.n	8000b40 <HAL_GPIO_Init+0x40>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d130      	bne.n	8000ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b76:	2201      	movs	r2, #1
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	f003 0201 	and.w	r2, r3, #1
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d017      	beq.n	8000bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d123      	bne.n	8000c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	6939      	ldr	r1, [r7, #16]
 8000c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0203 	and.w	r2, r3, #3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 809a 	beq.w	8000da8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c74:	4b55      	ldr	r3, [pc, #340]	@ (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a54      	ldr	r2, [pc, #336]	@ (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b52      	ldr	r3, [pc, #328]	@ (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c8c:	4a50      	ldr	r2, [pc, #320]	@ (8000dd0 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cb6:	d013      	beq.n	8000ce0 <HAL_GPIO_Init+0x1e0>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a46      	ldr	r2, [pc, #280]	@ (8000dd4 <HAL_GPIO_Init+0x2d4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d00d      	beq.n	8000cdc <HAL_GPIO_Init+0x1dc>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a45      	ldr	r2, [pc, #276]	@ (8000dd8 <HAL_GPIO_Init+0x2d8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d007      	beq.n	8000cd8 <HAL_GPIO_Init+0x1d8>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d101      	bne.n	8000cd4 <HAL_GPIO_Init+0x1d4>
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e006      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	e004      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	f002 0203 	and.w	r2, r2, #3
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	4093      	lsls	r3, r2
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf2:	4937      	ldr	r1, [pc, #220]	@ (8000dd0 <HAL_GPIO_Init+0x2d0>)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d24:	4a2e      	ldr	r2, [pc, #184]	@ (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d4e:	4a24      	ldr	r2, [pc, #144]	@ (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d54:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d78:	4a19      	ldr	r2, [pc, #100]	@ (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000da2:	4a0f      	ldr	r2, [pc, #60]	@ (8000de0 <HAL_GPIO_Init+0x2e0>)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3301      	adds	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa22 f303 	lsr.w	r3, r2, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f47f aea9 	bne.w	8000b10 <HAL_GPIO_Init+0x10>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	371c      	adds	r7, #28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010000 	.word	0x40010000
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	48000c00 	.word	0x48000c00
 8000de0:	40010400 	.word	0x40010400

08000de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
 8000df0:	4613      	mov	r3, r2
 8000df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000df4:	787b      	ldrb	r3, [r7, #1]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dfa:	887a      	ldrh	r2, [r7, #2]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e02:	887a      	ldrh	r2, [r7, #2]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e26:	887a      	ldrh	r2, [r7, #2]
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	041a      	lsls	r2, r3, #16
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43d9      	mvns	r1, r3
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	400b      	ands	r3, r1
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	619a      	str	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e54:	695a      	ldr	r2, [r3, #20]
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f806 	bl	8000e78 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40010400 	.word	0x40010400

08000e78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ea0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ea6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f001 b823 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 817d 	beq.w	80011c6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ecc:	4bbc      	ldr	r3, [pc, #752]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed8:	4bb9      	ldr	r3, [pc, #740]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d15c      	bne.n	8000f9e <HAL_RCC_OscConfig+0x10e>
 8000ee4:	4bb6      	ldr	r3, [pc, #728]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef0:	d155      	bne.n	8000f9e <HAL_RCC_OscConfig+0x10e>
 8000ef2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ef6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0a:	fab3 f383 	clz	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	095b      	lsrs	r3, r3, #5
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <HAL_RCC_OscConfig+0x94>
 8000f1e:	4ba8      	ldr	r3, [pc, #672]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	e015      	b.n	8000f50 <HAL_RCC_OscConfig+0xc0>
 8000f24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f28:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000f38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f3c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000f40:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f54:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000f58:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000f5c:	fa92 f2a2 	rbit	r2, r2
 8000f60:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000f64:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000f68:	fab2 f282 	clz	r2, r2
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	f042 0220 	orr.w	r2, r2, #32
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	f002 021f 	and.w	r2, r2, #31
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 811f 	beq.w	80011c4 <HAL_RCC_OscConfig+0x334>
 8000f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 8116 	bne.w	80011c4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f000 bfaf 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fa2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x12e>
 8000fb0:	4b83      	ldr	r3, [pc, #524]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a82      	ldr	r2, [pc, #520]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e036      	b.n	800102c <HAL_RCC_OscConfig+0x19c>
 8000fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x158>
 8000fce:	4b7c      	ldr	r3, [pc, #496]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a7b      	ldr	r2, [pc, #492]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b79      	ldr	r3, [pc, #484]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a78      	ldr	r2, [pc, #480]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e021      	b.n	800102c <HAL_RCC_OscConfig+0x19c>
 8000fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0x184>
 8000ffa:	4b71      	ldr	r3, [pc, #452]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a70      	ldr	r2, [pc, #448]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b6e      	ldr	r3, [pc, #440]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6d      	ldr	r2, [pc, #436]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0x19c>
 8001014:	4b6a      	ldr	r3, [pc, #424]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a69      	ldr	r2, [pc, #420]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b67      	ldr	r3, [pc, #412]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a66      	ldr	r2, [pc, #408]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800102a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800102c:	4b64      	ldr	r3, [pc, #400]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 800102e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001030:	f023 020f 	bic.w	r2, r3, #15
 8001034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001038:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	495f      	ldr	r1, [pc, #380]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001042:	4313      	orrs	r3, r2
 8001044:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800104a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d059      	beq.n	800110a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fb95 	bl	8000784 <HAL_GetTick>
 800105a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	e00a      	b.n	8001076 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fb90 	bl	8000784 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b64      	cmp	r3, #100	@ 0x64
 800106e:	d902      	bls.n	8001076 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	f000 bf43 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 8001076:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800107a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800108a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	fab3 f383 	clz	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	095b      	lsrs	r3, r3, #5
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d102      	bne.n	80010a8 <HAL_RCC_OscConfig+0x218>
 80010a2:	4b47      	ldr	r3, [pc, #284]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	e015      	b.n	80010d4 <HAL_RCC_OscConfig+0x244>
 80010a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ac:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80010bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010c0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80010c4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80010d0:	4b3b      	ldr	r3, [pc, #236]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 80010d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010d8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80010dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80010e0:	fa92 f2a2 	rbit	r2, r2
 80010e4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80010e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80010ec:	fab2 f282 	clz	r2, r2
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	f042 0220 	orr.w	r2, r2, #32
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	f002 021f 	and.w	r2, r2, #31
 80010fc:	2101      	movs	r1, #1
 80010fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001102:	4013      	ands	r3, r2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0ab      	beq.n	8001060 <HAL_RCC_OscConfig+0x1d0>
 8001108:	e05d      	b.n	80011c6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fb3b 	bl	8000784 <HAL_GetTick>
 800110e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	e00a      	b.n	800112a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fb36 	bl	8000784 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b64      	cmp	r3, #100	@ 0x64
 8001122:	d902      	bls.n	800112a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	f000 bee9 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 800112a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800112e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800113e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	095b      	lsrs	r3, r3, #5
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0x2cc>
 8001156:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	e015      	b.n	8001188 <HAL_RCC_OscConfig+0x2f8>
 800115c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001160:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001170:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001174:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001178:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001188:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800118c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001190:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001194:	fa92 f2a2 	rbit	r2, r2
 8001198:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800119c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80011a0:	fab2 f282 	clz	r2, r2
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	f002 021f 	and.w	r2, r2, #31
 80011b0:	2101      	movs	r1, #1
 80011b2:	fa01 f202 	lsl.w	r2, r1, r2
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1ab      	bne.n	8001114 <HAL_RCC_OscConfig+0x284>
 80011bc:	e003      	b.n	80011c6 <HAL_RCC_OscConfig+0x336>
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 817d 	beq.w	80014d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011dc:	4ba6      	ldr	r3, [pc, #664]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00b      	beq.n	8001200 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011e8:	4ba3      	ldr	r3, [pc, #652]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d172      	bne.n	80012da <HAL_RCC_OscConfig+0x44a>
 80011f4:	4ba0      	ldr	r3, [pc, #640]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d16c      	bne.n	80012da <HAL_RCC_OscConfig+0x44a>
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001212:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	fab3 f383 	clz	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	095b      	lsrs	r3, r3, #5
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d102      	bne.n	8001230 <HAL_RCC_OscConfig+0x3a0>
 800122a:	4b93      	ldr	r3, [pc, #588]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	e013      	b.n	8001258 <HAL_RCC_OscConfig+0x3c8>
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001248:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001254:	4b88      	ldr	r3, [pc, #544]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 8001256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001258:	2202      	movs	r2, #2
 800125a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800125e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001262:	fa92 f2a2 	rbit	r2, r2
 8001266:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800126a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800126e:	fab2 f282 	clz	r2, r2
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	f042 0220 	orr.w	r2, r2, #32
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	f002 021f 	and.w	r2, r2, #31
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	4013      	ands	r3, r2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00a      	beq.n	80012a0 <HAL_RCC_OscConfig+0x410>
 800128a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800128e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d002      	beq.n	80012a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	f000 be2e 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b75      	ldr	r3, [pc, #468]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	21f8      	movs	r1, #248	@ 0xf8
 80012b6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80012be:	fa91 f1a1 	rbit	r1, r1
 80012c2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80012c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80012ca:	fab1 f181 	clz	r1, r1
 80012ce:	b2c9      	uxtb	r1, r1
 80012d0:	408b      	lsls	r3, r1
 80012d2:	4969      	ldr	r1, [pc, #420]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d8:	e0fd      	b.n	80014d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8088 	beq.w	80013fc <HAL_RCC_OscConfig+0x56c>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80012fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800130c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	461a      	mov	r2, r3
 8001314:	2301      	movs	r3, #1
 8001316:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fa34 	bl	8000784 <HAL_GetTick>
 800131c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	e00a      	b.n	8001338 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fa2f 	bl	8000784 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d902      	bls.n	8001338 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	f000 bde2 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800134a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134e:	fab3 f383 	clz	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	095b      	lsrs	r3, r3, #5
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <HAL_RCC_OscConfig+0x4d8>
 8001362:	4b45      	ldr	r3, [pc, #276]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	e013      	b.n	8001390 <HAL_RCC_OscConfig+0x500>
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001380:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800138c:	4b3a      	ldr	r3, [pc, #232]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001390:	2202      	movs	r2, #2
 8001392:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001396:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800139a:	fa92 f2a2 	rbit	r2, r2
 800139e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80013a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80013a6:	fab2 f282 	clz	r2, r2
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	f002 021f 	and.w	r2, r2, #31
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0af      	beq.n	8001322 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	21f8      	movs	r1, #248	@ 0xf8
 80013d8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80013e0:	fa91 f1a1 	rbit	r1, r1
 80013e4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80013e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80013ec:	fab1 f181 	clz	r1, r1
 80013f0:	b2c9      	uxtb	r1, r1
 80013f2:	408b      	lsls	r3, r1
 80013f4:	4920      	ldr	r1, [pc, #128]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
 80013fa:	e06c      	b.n	80014d6 <HAL_RCC_OscConfig+0x646>
 80013fc:	2301      	movs	r3, #1
 80013fe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800140e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800141c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	461a      	mov	r2, r3
 8001424:	2300      	movs	r3, #0
 8001426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff f9ac 	bl	8000784 <HAL_GetTick>
 800142c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff f9a7 	bl	8000784 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d902      	bls.n	8001448 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	f000 bd5a 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800145a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	095b      	lsrs	r3, r3, #5
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d104      	bne.n	800147c <HAL_RCC_OscConfig+0x5ec>
 8001472:	4b01      	ldr	r3, [pc, #4]	@ (8001478 <HAL_RCC_OscConfig+0x5e8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	e015      	b.n	80014a4 <HAL_RCC_OscConfig+0x614>
 8001478:	40021000 	.word	0x40021000
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001494:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80014a0:	4bc8      	ldr	r3, [pc, #800]	@ (80017c4 <HAL_RCC_OscConfig+0x934>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	2202      	movs	r2, #2
 80014a6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80014aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80014ae:	fa92 f2a2 	rbit	r2, r2
 80014b2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80014b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80014ba:	fab2 f282 	clz	r2, r2
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	f042 0220 	orr.w	r2, r2, #32
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	f002 021f 	and.w	r2, r2, #31
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1ad      	bne.n	8001432 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8110 	beq.w	800170c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d079      	beq.n	80015f0 <HAL_RCC_OscConfig+0x760>
 80014fc:	2301      	movs	r3, #1
 80014fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800150e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001512:	fab3 f383 	clz	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	4bab      	ldr	r3, [pc, #684]	@ (80017c8 <HAL_RCC_OscConfig+0x938>)
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	461a      	mov	r2, r3
 8001522:	2301      	movs	r3, #1
 8001524:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001526:	f7ff f92d 	bl	8000784 <HAL_GetTick>
 800152a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff f928 	bl	8000784 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d902      	bls.n	8001546 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	f000 bcdb 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001560:	2202      	movs	r2, #2
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001568:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	fa93 f2a3 	rbit	r2, r3
 8001572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001576:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001584:	2202      	movs	r2, #2
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	fa93 f2a3 	rbit	r2, r3
 8001596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800159e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a0:	4b88      	ldr	r3, [pc, #544]	@ (80017c4 <HAL_RCC_OscConfig+0x934>)
 80015a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80015ac:	2102      	movs	r1, #2
 80015ae:	6019      	str	r1, [r3, #0]
 80015b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fa93 f1a3 	rbit	r1, r3
 80015be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015c6:	6019      	str	r1, [r3, #0]
  return result;
 80015c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015cc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	2101      	movs	r1, #1
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0a0      	beq.n	8001530 <HAL_RCC_OscConfig+0x6a0>
 80015ee:	e08d      	b.n	800170c <HAL_RCC_OscConfig+0x87c>
 80015f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001600:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	fa93 f2a3 	rbit	r2, r3
 800160a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001612:	601a      	str	r2, [r3, #0]
  return result;
 8001614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001618:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800161c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4b68      	ldr	r3, [pc, #416]	@ (80017c8 <HAL_RCC_OscConfig+0x938>)
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	461a      	mov	r2, r3
 800162e:	2300      	movs	r3, #0
 8001630:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff f8a7 	bl	8000784 <HAL_GetTick>
 8001636:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163a:	e00a      	b.n	8001652 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff f8a2 	bl	8000784 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d902      	bls.n	8001652 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	f000 bc55 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 8001652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001656:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800165a:	2202      	movs	r2, #2
 800165c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001662:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	fa93 f2a3 	rbit	r2, r3
 800166c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001670:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800167e:	2202      	movs	r2, #2
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001686:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	fa93 f2a3 	rbit	r2, r3
 8001690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001694:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80016a2:	2202      	movs	r2, #2
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fa93 f2a3 	rbit	r2, r3
 80016b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	4b41      	ldr	r3, [pc, #260]	@ (80017c4 <HAL_RCC_OscConfig+0x934>)
 80016c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80016ca:	2102      	movs	r1, #2
 80016cc:	6019      	str	r1, [r3, #0]
 80016ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f1a3 	rbit	r1, r3
 80016dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016e4:	6019      	str	r1, [r3, #0]
  return result;
 80016e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d197      	bne.n	800163c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 81a1 	beq.w	8001a64 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001728:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <HAL_RCC_OscConfig+0x934>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d116      	bne.n	8001762 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <HAL_RCC_OscConfig+0x934>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	4a22      	ldr	r2, [pc, #136]	@ (80017c4 <HAL_RCC_OscConfig+0x934>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173e:	61d3      	str	r3, [r2, #28]
 8001740:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <HAL_RCC_OscConfig+0x934>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001756:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800175a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800175c:	2301      	movs	r3, #1
 800175e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <HAL_RCC_OscConfig+0x93c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d11a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <HAL_RCC_OscConfig+0x93c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a16      	ldr	r2, [pc, #88]	@ (80017cc <HAL_RCC_OscConfig+0x93c>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001778:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff f803 	bl	8000784 <HAL_GetTick>
 800177e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	e009      	b.n	8001798 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7fe fffe 	bl	8000784 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b64      	cmp	r3, #100	@ 0x64
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e3b1      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <HAL_RCC_OscConfig+0x93c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ef      	beq.n	8001784 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d10d      	bne.n	80017d0 <HAL_RCC_OscConfig+0x940>
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_RCC_OscConfig+0x934>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a02      	ldr	r2, [pc, #8]	@ (80017c4 <HAL_RCC_OscConfig+0x934>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	e03c      	b.n	800183c <HAL_RCC_OscConfig+0x9ac>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	10908120 	.word	0x10908120
 80017cc:	40007000 	.word	0x40007000
 80017d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x96a>
 80017e0:	4bc1      	ldr	r3, [pc, #772]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4ac0      	ldr	r2, [pc, #768]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6213      	str	r3, [r2, #32]
 80017ec:	4bbe      	ldr	r3, [pc, #760]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4abd      	ldr	r2, [pc, #756]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	e020      	b.n	800183c <HAL_RCC_OscConfig+0x9ac>
 80017fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x994>
 800180a:	4bb7      	ldr	r3, [pc, #732]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4ab6      	ldr	r2, [pc, #728]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	4bb4      	ldr	r3, [pc, #720]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4ab3      	ldr	r2, [pc, #716]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0x9ac>
 8001824:	4bb0      	ldr	r3, [pc, #704]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4aaf      	ldr	r2, [pc, #700]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	4bad      	ldr	r3, [pc, #692]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4aac      	ldr	r2, [pc, #688]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001840:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8081 	beq.w	8001950 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7fe ff99 	bl	8000784 <HAL_GetTick>
 8001852:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7fe ff94 	bl	8000784 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e345      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
 8001870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001874:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001878:	2202      	movs	r2, #2
 800187a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001880:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	fa93 f2a3 	rbit	r2, r3
 800188a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001898:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800189c:	2202      	movs	r2, #2
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80018b6:	601a      	str	r2, [r3, #0]
  return result;
 80018b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018bc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80018c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	095b      	lsrs	r3, r3, #5
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d102      	bne.n	80018dc <HAL_RCC_OscConfig+0xa4c>
 80018d6:	4b84      	ldr	r3, [pc, #528]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	e013      	b.n	8001904 <HAL_RCC_OscConfig+0xa74>
 80018dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80018e4:	2202      	movs	r2, #2
 80018e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	4b79      	ldr	r3, [pc, #484]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001908:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800190c:	2102      	movs	r1, #2
 800190e:	6011      	str	r1, [r2, #0]
 8001910:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001914:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	fa92 f1a2 	rbit	r1, r2
 800191e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001922:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001926:	6011      	str	r1, [r2, #0]
  return result;
 8001928:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800192c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	fab2 f282 	clz	r2, r2
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f002 021f 	and.w	r2, r2, #31
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d084      	beq.n	8001858 <HAL_RCC_OscConfig+0x9c8>
 800194e:	e07f      	b.n	8001a50 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7fe ff18 	bl	8000784 <HAL_GetTick>
 8001954:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	e00b      	b.n	8001972 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7fe ff13 	bl	8000784 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e2c4      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
 8001972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001976:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001982:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001990:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019b8:	601a      	str	r2, [r3, #0]
  return result;
 80019ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019be:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d102      	bne.n	80019de <HAL_RCC_OscConfig+0xb4e>
 80019d8:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	e013      	b.n	8001a06 <HAL_RCC_OscConfig+0xb76>
 80019de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80019e6:	2202      	movs	r2, #2
 80019e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	fa93 f2a3 	rbit	r2, r3
 80019f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	4b39      	ldr	r3, [pc, #228]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a0a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001a0e:	2102      	movs	r1, #2
 8001a10:	6011      	str	r1, [r2, #0]
 8001a12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a16:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	fa92 f1a2 	rbit	r1, r2
 8001a20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a24:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001a28:	6011      	str	r1, [r2, #0]
  return result;
 8001a2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a2e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d184      	bne.n	800195a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a50:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8242 	beq.w	8001efa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	f000 8213 	beq.w	8001eaa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	f040 8162 	bne.w	8001d5a <HAL_RCC_OscConfig+0xeca>
 8001a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001a9e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001aba:	601a      	str	r2, [r3, #0]
  return result;
 8001abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001ac4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ad0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7fe fe52 	bl	8000784 <HAL_GetTick>
 8001ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae4:	e00c      	b.n	8001b00 <HAL_RCC_OscConfig+0xc70>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aec:	f7fe fe4a 	bl	8000784 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e1fd      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001b08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b12:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b20:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001b24:	601a      	str	r2, [r3, #0]
  return result;
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001b2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d102      	bne.n	8001b4a <HAL_RCC_OscConfig+0xcba>
 8001b44:	4bb0      	ldr	r3, [pc, #704]	@ (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	e027      	b.n	8001b9a <HAL_RCC_OscConfig+0xd0a>
 8001b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b82:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b90:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	4b9c      	ldr	r3, [pc, #624]	@ (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b9e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ba2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ba6:	6011      	str	r1, [r2, #0]
 8001ba8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bac:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	fa92 f1a2 	rbit	r1, r2
 8001bb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001bbe:	6011      	str	r1, [r2, #0]
  return result;
 8001bc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bc4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	fab2 f282 	clz	r2, r2
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f042 0220 	orr.w	r2, r2, #32
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f002 021f 	and.w	r2, r2, #31
 8001bda:	2101      	movs	r1, #1
 8001bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d182      	bne.n	8001aec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be6:	4b88      	ldr	r3, [pc, #544]	@ (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	497f      	ldr	r1, [pc, #508]	@ (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
 8001c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c12:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001c16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c20:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c32:	601a      	str	r2, [r3, #0]
  return result;
 8001c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c38:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c3c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2301      	movs	r3, #1
 8001c52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7fe fd96 	bl	8000784 <HAL_GetTick>
 8001c58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5c:	e009      	b.n	8001c72 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe fd91 	bl	8000784 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e144      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c92:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c96:	601a      	str	r2, [r3, #0]
  return result;
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ca0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_OscConfig+0xe2c>
 8001cb6:	4b54      	ldr	r3, [pc, #336]	@ (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e027      	b.n	8001d0c <HAL_RCC_OscConfig+0xe7c>
 8001cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001cc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cce:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cdc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001cea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4b3f      	ldr	r3, [pc, #252]	@ (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d10:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001d14:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d18:	6011      	str	r1, [r2, #0]
 8001d1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d1e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	fa92 f1a2 	rbit	r1, r2
 8001d28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d2c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001d30:	6011      	str	r1, [r2, #0]
  return result;
 8001d32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d36:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d082      	beq.n	8001c5e <HAL_RCC_OscConfig+0xdce>
 8001d58:	e0cf      	b.n	8001efa <HAL_RCC_OscConfig+0x106a>
 8001d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001d62:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	fa93 f2a3 	rbit	r2, r3
 8001d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d7e:	601a      	str	r2, [r3, #0]
  return result;
 8001d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d84:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d94:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe fcf0 	bl	8000784 <HAL_GetTick>
 8001da4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da8:	e009      	b.n	8001dbe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001daa:	f7fe fceb 	bl	8000784 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e09e      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
 8001dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001dc6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001de2:	601a      	str	r2, [r3, #0]
  return result;
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001dec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d104      	bne.n	8001e0c <HAL_RCC_OscConfig+0xf7c>
 8001e02:	4b01      	ldr	r3, [pc, #4]	@ (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e029      	b.n	8001e5c <HAL_RCC_OscConfig+0xfcc>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e10:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001e14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e36:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001e3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e44:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e52:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	4b2b      	ldr	r3, [pc, #172]	@ (8001f08 <HAL_RCC_OscConfig+0x1078>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e60:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001e64:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e68:	6011      	str	r1, [r2, #0]
 8001e6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e6e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	fa92 f1a2 	rbit	r1, r2
 8001e78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e7c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e80:	6011      	str	r1, [r2, #0]
  return result;
 8001e82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e86:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	fab2 f282 	clz	r2, r2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f042 0220 	orr.w	r2, r2, #32
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f002 021f 	and.w	r2, r2, #31
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d180      	bne.n	8001daa <HAL_RCC_OscConfig+0xf1a>
 8001ea8:	e027      	b.n	8001efa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01e      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ebe:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <HAL_RCC_OscConfig+0x1078>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001eca:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d10b      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ede:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001ee2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b09e      	sub	sp, #120	@ 0x78
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e162      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f24:	4b90      	ldr	r3, [pc, #576]	@ (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d910      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b8d      	ldr	r3, [pc, #564]	@ (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 0207 	bic.w	r2, r3, #7
 8001f3a:	498b      	ldr	r1, [pc, #556]	@ (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b89      	ldr	r3, [pc, #548]	@ (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e14a      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b82      	ldr	r3, [pc, #520]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	497f      	ldr	r1, [pc, #508]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80dc 	beq.w	8002138 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d13c      	bne.n	8002002 <HAL_RCC_ClockConfig+0xf6>
 8001f88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d102      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xa6>
 8001fac:	4b6f      	ldr	r3, [pc, #444]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	e00f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0xc6>
 8001fb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fce:	4b67      	ldr	r3, [pc, #412]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fd6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001fd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fda:	fa92 f2a2 	rbit	r2, r2
 8001fde:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001fe0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fe2:	fab2 f282 	clz	r2, r2
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f042 0220 	orr.w	r2, r2, #32
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f002 021f 	and.w	r2, r2, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d17b      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0f3      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d13c      	bne.n	8002084 <HAL_RCC_ClockConfig+0x178>
 800200a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800200e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <HAL_RCC_ClockConfig+0x128>
 800202e:	4b4f      	ldr	r3, [pc, #316]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e00f      	b.n	8002054 <HAL_RCC_ClockConfig+0x148>
 8002034:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002038:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	647b      	str	r3, [r7, #68]	@ 0x44
 8002042:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002046:	643b      	str	r3, [r7, #64]	@ 0x40
 8002048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002050:	4b46      	ldr	r3, [pc, #280]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002058:	63ba      	str	r2, [r7, #56]	@ 0x38
 800205a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800205c:	fa92 f2a2 	rbit	r2, r2
 8002060:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002062:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002064:	fab2 f282 	clz	r2, r2
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	f042 0220 	orr.w	r2, r2, #32
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f002 021f 	and.w	r2, r2, #31
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d13a      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b2      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
 8002084:	2302      	movs	r3, #2
 8002086:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_ClockConfig+0x1a0>
 80020a6:	4b31      	ldr	r3, [pc, #196]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	e00d      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1bc>
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b8:	2302      	movs	r3, #2
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	4b29      	ldr	r3, [pc, #164]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c8:	2202      	movs	r2, #2
 80020ca:	61ba      	str	r2, [r7, #24]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	fa92 f2a2 	rbit	r2, r2
 80020d2:	617a      	str	r2, [r7, #20]
  return result;
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f002 021f 	and.w	r2, r2, #31
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e079      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	491a      	ldr	r1, [pc, #104]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002108:	f7fe fb3c 	bl	8000784 <HAL_GetTick>
 800210c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7fe fb38 	bl	8000784 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e061      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HAL_RCC_ClockConfig+0x260>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_RCC_ClockConfig+0x25c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d214      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4906      	ldr	r1, [pc, #24]	@ (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e040      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
 8002168:	40022000 	.word	0x40022000
 800216c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b1d      	ldr	r3, [pc, #116]	@ (80021f4 <HAL_RCC_ClockConfig+0x2e8>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	491a      	ldr	r1, [pc, #104]	@ (80021f4 <HAL_RCC_ClockConfig+0x2e8>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219a:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <HAL_RCC_ClockConfig+0x2e8>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4912      	ldr	r1, [pc, #72]	@ (80021f4 <HAL_RCC_ClockConfig+0x2e8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021ae:	f000 f829 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021b2:	4601      	mov	r1, r0
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <HAL_RCC_ClockConfig+0x2e8>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021bc:	22f0      	movs	r2, #240	@ 0xf0
 80021be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	fa92 f2a2 	rbit	r2, r2
 80021c6:	60fa      	str	r2, [r7, #12]
  return result;
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	40d3      	lsrs	r3, r2
 80021d2:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <HAL_RCC_ClockConfig+0x2ec>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	fa21 f303 	lsr.w	r3, r1, r3
 80021da:	4a08      	ldr	r2, [pc, #32]	@ (80021fc <HAL_RCC_ClockConfig+0x2f0>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021de:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <HAL_RCC_ClockConfig+0x2f4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fa8a 	bl	80006fc <HAL_InitTick>
  
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3778      	adds	r7, #120	@ 0x78
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	0800373c 	.word	0x0800373c
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004

08002204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800221e:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x94>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x30>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x36>
 8002232:	e026      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_RCC_GetSysClockFreq+0x98>)
 8002236:	613b      	str	r3, [r7, #16]
      break;
 8002238:	e026      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	0c9b      	lsrs	r3, r3, #18
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x94>)
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	4a14      	ldr	r2, [pc, #80]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002260:	4a0e      	ldr	r2, [pc, #56]	@ (800229c <HAL_RCC_GetSysClockFreq+0x98>)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	fbb2 f2f3 	udiv	r2, r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	e004      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a0c      	ldr	r2, [pc, #48]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
      break;
 8002280:	e002      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_RCC_GetSysClockFreq+0x98>)
 8002284:	613b      	str	r3, [r7, #16]
      break;
 8002286:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002288:	693b      	ldr	r3, [r7, #16]
}
 800228a:	4618      	mov	r0, r3
 800228c:	371c      	adds	r7, #28
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	08003754 	.word	0x08003754
 80022a4:	08003764 	.word	0x08003764
 80022a8:	003d0900 	.word	0x003d0900

080022ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000000 	.word	0x20000000

080022c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022ca:	f7ff ffef 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 80022ce:	4601      	mov	r1, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80022dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	fa92 f2a2 	rbit	r2, r2
 80022e4:	603a      	str	r2, [r7, #0]
  return result;
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	fab2 f282 	clz	r2, r2
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	40d3      	lsrs	r3, r2
 80022f0:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <HAL_RCC_GetPCLK1Freq+0x40>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022f8:	4618      	mov	r0, r3
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	0800374c 	.word	0x0800374c

08002308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800230e:	f7ff ffcd 	bl	80022ac <HAL_RCC_GetHCLKFreq>
 8002312:	4601      	mov	r1, r0
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800231c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002320:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	fa92 f2a2 	rbit	r2, r2
 8002328:	603a      	str	r2, [r7, #0]
  return result;
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	40d3      	lsrs	r3, r2
 8002334:	4a04      	ldr	r2, [pc, #16]	@ (8002348 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	0800374c 	.word	0x0800374c

0800234c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e040      	b.n	80023e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe f8de 	bl	8000530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	@ 0x24
 8002378:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fca8 	bl	8002ce8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fb6f 	bl	8002a7c <UART_SetConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e01b      	b.n	80023e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fd27 	bl	8002e2c <UART_CheckIdleState>
 80023de:	4603      	mov	r3, r0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d132      	bne.n	8002466 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_UART_Receive_IT+0x24>
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e02b      	b.n	8002468 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d018      	beq.n	8002456 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	e853 3f00 	ldrex	r3, [r3]
 8002430:	613b      	str	r3, [r7, #16]
   return(result);
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002446:	69f9      	ldr	r1, [r7, #28]
 8002448:	6a3a      	ldr	r2, [r7, #32]
 800244a:	e841 2300 	strex	r3, r2, [r1]
 800244e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1e6      	bne.n	8002424 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	461a      	mov	r2, r3
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fdfb 	bl	8003058 <UART_Start_Receive_IT>
 8002462:	4603      	mov	r3, r0
 8002464:	e000      	b.n	8002468 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002466:	2302      	movs	r3, #2
  }
}
 8002468:	4618      	mov	r0, r3
 800246a:	3728      	adds	r7, #40	@ 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0ba      	sub	sp, #232	@ 0xe8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002496:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800249a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800249e:	4013      	ands	r3, r2
 80024a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80024a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d115      	bne.n	80024d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80024ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00f      	beq.n	80024d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 82ab 	beq.w	8002a24 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4798      	blx	r3
      }
      return;
 80024d6:	e2a5      	b.n	8002a24 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8117 	beq.w	8002710 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80024e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80024ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80024f2:	4b85      	ldr	r3, [pc, #532]	@ (8002708 <HAL_UART_IRQHandler+0x298>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 810a 	beq.w	8002710 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d011      	beq.n	800252c <HAL_UART_IRQHandler+0xbc>
 8002508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800250c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00b      	beq.n	800252c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800252c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d011      	beq.n	800255c <HAL_UART_IRQHandler+0xec>
 8002538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00b      	beq.n	800255c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2202      	movs	r2, #2
 800254a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002552:	f043 0204 	orr.w	r2, r3, #4
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800255c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d011      	beq.n	800258c <HAL_UART_IRQHandler+0x11c>
 8002568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00b      	beq.n	800258c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2204      	movs	r2, #4
 800257a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002582:	f043 0202 	orr.w	r2, r3, #2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800258c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d017      	beq.n	80025c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d105      	bne.n	80025b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80025a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00b      	beq.n	80025c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2208      	movs	r2, #8
 80025b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025be:	f043 0208 	orr.w	r2, r3, #8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d012      	beq.n	80025fa <HAL_UART_IRQHandler+0x18a>
 80025d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00c      	beq.n	80025fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025f0:	f043 0220 	orr.w	r2, r3, #32
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 8211 	beq.w	8002a28 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002634:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002642:	2b40      	cmp	r3, #64	@ 0x40
 8002644:	d005      	beq.n	8002652 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800264a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800264e:	2b00      	cmp	r3, #0
 8002650:	d04f      	beq.n	80026f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fdc6 	bl	80031e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002662:	2b40      	cmp	r3, #64	@ 0x40
 8002664:	d141      	bne.n	80026ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3308      	adds	r3, #8
 800266c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800267c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3308      	adds	r3, #8
 800268e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002692:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800269e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026a2:	e841 2300 	strex	r3, r2, [r1]
 80026a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1d9      	bne.n	8002666 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d013      	beq.n	80026e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026be:	4a13      	ldr	r2, [pc, #76]	@ (800270c <HAL_UART_IRQHandler+0x29c>)
 80026c0:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe f9db 	bl	8000a82 <HAL_DMA_Abort_IT>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d017      	beq.n	8002702 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80026dc:	4610      	mov	r0, r2
 80026de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	e00f      	b.n	8002702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f9b4 	bl	8002a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	e00b      	b.n	8002702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f9b0 	bl	8002a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	e007      	b.n	8002702 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f9ac 	bl	8002a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002700:	e192      	b.n	8002a28 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002702:	bf00      	nop
    return;
 8002704:	e190      	b.n	8002a28 <HAL_UART_IRQHandler+0x5b8>
 8002706:	bf00      	nop
 8002708:	04000120 	.word	0x04000120
 800270c:	080032ad 	.word	0x080032ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002714:	2b01      	cmp	r3, #1
 8002716:	f040 814b 	bne.w	80029b0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8144 	beq.w	80029b0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 813d 	beq.w	80029b0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2210      	movs	r2, #16
 800273c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	f040 80b5 	bne.w	80028b8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800275a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8164 	beq.w	8002a2c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800276a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800276e:	429a      	cmp	r2, r3
 8002770:	f080 815c 	bcs.w	8002a2c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800277a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b20      	cmp	r3, #32
 8002786:	f000 8086 	beq.w	8002896 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002792:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002796:	e853 3f00 	ldrex	r3, [r3]
 800279a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800279e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027b8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1da      	bne.n	800278a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3308      	adds	r3, #8
 80027da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027de:	e853 3f00 	ldrex	r3, [r3]
 80027e2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3308      	adds	r3, #8
 80027f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027f8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002800:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002804:	e841 2300 	strex	r3, r2, [r1]
 8002808:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800280a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e1      	bne.n	80027d4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3308      	adds	r3, #8
 8002816:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3308      	adds	r3, #8
 8002830:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002834:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002836:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800283a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e3      	bne.n	8002810 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800285e:	e853 3f00 	ldrex	r3, [r3]
 8002862:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002866:	f023 0310 	bic.w	r3, r3, #16
 800286a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002878:	65bb      	str	r3, [r7, #88]	@ 0x58
 800287a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800287e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e4      	bne.n	8002856 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe f8b8 	bl	8000a06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8d7 	bl	8002a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80028b6:	e0b9      	b.n	8002a2c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80ab 	beq.w	8002a30 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80028da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80a6 	beq.w	8002a30 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	e853 3f00 	ldrex	r3, [r3]
 80028f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002906:	647b      	str	r3, [r7, #68]	@ 0x44
 8002908:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800290c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800290e:	e841 2300 	strex	r3, r2, [r1]
 8002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e4      	bne.n	80028e4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3308      	adds	r3, #8
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	623b      	str	r3, [r7, #32]
   return(result);
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3308      	adds	r3, #8
 800293a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800293e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800294c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1e3      	bne.n	800291a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	e853 3f00 	ldrex	r3, [r3]
 8002972:	60fb      	str	r3, [r7, #12]
   return(result);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0310 	bic.w	r3, r3, #16
 800297a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298c:	69b9      	ldr	r1, [r7, #24]
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	e841 2300 	strex	r3, r2, [r1]
 8002994:	617b      	str	r3, [r7, #20]
   return(result);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e4      	bne.n	8002966 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029a6:	4619      	mov	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f85b 	bl	8002a64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029ae:	e03f      	b.n	8002a30 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00e      	beq.n	80029da <HAL_UART_IRQHandler+0x56a>
 80029bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d008      	beq.n	80029da <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80029d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fe52 	bl	800367c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029d8:	e02d      	b.n	8002a36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80029da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00e      	beq.n	8002a04 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80029e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01c      	beq.n	8002a34 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
    }
    return;
 8002a02:	e017      	b.n	8002a34 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d012      	beq.n	8002a36 <HAL_UART_IRQHandler+0x5c6>
 8002a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fc5b 	bl	80032d8 <UART_EndTransmit_IT>
    return;
 8002a22:	e008      	b.n	8002a36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002a24:	bf00      	nop
 8002a26:	e006      	b.n	8002a36 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002a28:	bf00      	nop
 8002a2a:	e004      	b.n	8002a36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002a2c:	bf00      	nop
 8002a2e:	e002      	b.n	8002a36 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002a30:	bf00      	nop
 8002a32:	e000      	b.n	8002a36 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002a34:	bf00      	nop
  }

}
 8002a36:	37e8      	adds	r7, #232	@ 0xe8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4b8a      	ldr	r3, [pc, #552]	@ (8002cd0 <UART_SetConfig+0x254>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	6979      	ldr	r1, [r7, #20]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a78      	ldr	r2, [pc, #480]	@ (8002cd4 <UART_SetConfig+0x258>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d120      	bne.n	8002b3a <UART_SetConfig+0xbe>
 8002af8:	4b77      	ldr	r3, [pc, #476]	@ (8002cd8 <UART_SetConfig+0x25c>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d817      	bhi.n	8002b34 <UART_SetConfig+0xb8>
 8002b04:	a201      	add	r2, pc, #4	@ (adr r2, 8002b0c <UART_SetConfig+0x90>)
 8002b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0a:	bf00      	nop
 8002b0c:	08002b1d 	.word	0x08002b1d
 8002b10:	08002b29 	.word	0x08002b29
 8002b14:	08002b2f 	.word	0x08002b2f
 8002b18:	08002b23 	.word	0x08002b23
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	77fb      	strb	r3, [r7, #31]
 8002b20:	e01d      	b.n	8002b5e <UART_SetConfig+0xe2>
 8002b22:	2302      	movs	r3, #2
 8002b24:	77fb      	strb	r3, [r7, #31]
 8002b26:	e01a      	b.n	8002b5e <UART_SetConfig+0xe2>
 8002b28:	2304      	movs	r3, #4
 8002b2a:	77fb      	strb	r3, [r7, #31]
 8002b2c:	e017      	b.n	8002b5e <UART_SetConfig+0xe2>
 8002b2e:	2308      	movs	r3, #8
 8002b30:	77fb      	strb	r3, [r7, #31]
 8002b32:	e014      	b.n	8002b5e <UART_SetConfig+0xe2>
 8002b34:	2310      	movs	r3, #16
 8002b36:	77fb      	strb	r3, [r7, #31]
 8002b38:	e011      	b.n	8002b5e <UART_SetConfig+0xe2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a67      	ldr	r2, [pc, #412]	@ (8002cdc <UART_SetConfig+0x260>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d102      	bne.n	8002b4a <UART_SetConfig+0xce>
 8002b44:	2300      	movs	r3, #0
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	e009      	b.n	8002b5e <UART_SetConfig+0xe2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a64      	ldr	r2, [pc, #400]	@ (8002ce0 <UART_SetConfig+0x264>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d102      	bne.n	8002b5a <UART_SetConfig+0xde>
 8002b54:	2300      	movs	r3, #0
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	e001      	b.n	8002b5e <UART_SetConfig+0xe2>
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b66:	d15a      	bne.n	8002c1e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002b68:	7ffb      	ldrb	r3, [r7, #31]
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d827      	bhi.n	8002bbe <UART_SetConfig+0x142>
 8002b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b74 <UART_SetConfig+0xf8>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b99 	.word	0x08002b99
 8002b78:	08002ba1 	.word	0x08002ba1
 8002b7c:	08002ba9 	.word	0x08002ba9
 8002b80:	08002bbf 	.word	0x08002bbf
 8002b84:	08002baf 	.word	0x08002baf
 8002b88:	08002bbf 	.word	0x08002bbf
 8002b8c:	08002bbf 	.word	0x08002bbf
 8002b90:	08002bbf 	.word	0x08002bbf
 8002b94:	08002bb7 	.word	0x08002bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b98:	f7ff fb94 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 8002b9c:	61b8      	str	r0, [r7, #24]
        break;
 8002b9e:	e013      	b.n	8002bc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba0:	f7ff fbb2 	bl	8002308 <HAL_RCC_GetPCLK2Freq>
 8002ba4:	61b8      	str	r0, [r7, #24]
        break;
 8002ba6:	e00f      	b.n	8002bc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba8:	4b4e      	ldr	r3, [pc, #312]	@ (8002ce4 <UART_SetConfig+0x268>)
 8002baa:	61bb      	str	r3, [r7, #24]
        break;
 8002bac:	e00c      	b.n	8002bc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bae:	f7ff fb29 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 8002bb2:	61b8      	str	r0, [r7, #24]
        break;
 8002bb4:	e008      	b.n	8002bc8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bba:	61bb      	str	r3, [r7, #24]
        break;
 8002bbc:	e004      	b.n	8002bc8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	77bb      	strb	r3, [r7, #30]
        break;
 8002bc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d074      	beq.n	8002cb8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	005a      	lsls	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	441a      	add	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	d916      	bls.n	8002c18 <UART_SetConfig+0x19c>
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf0:	d212      	bcs.n	8002c18 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	f023 030f 	bic.w	r3, r3, #15
 8002bfa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	89fb      	ldrh	r3, [r7, #14]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	89fa      	ldrh	r2, [r7, #14]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	e04f      	b.n	8002cb8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	77bb      	strb	r3, [r7, #30]
 8002c1c:	e04c      	b.n	8002cb8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d828      	bhi.n	8002c76 <UART_SetConfig+0x1fa>
 8002c24:	a201      	add	r2, pc, #4	@ (adr r2, 8002c2c <UART_SetConfig+0x1b0>)
 8002c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2a:	bf00      	nop
 8002c2c:	08002c51 	.word	0x08002c51
 8002c30:	08002c59 	.word	0x08002c59
 8002c34:	08002c61 	.word	0x08002c61
 8002c38:	08002c77 	.word	0x08002c77
 8002c3c:	08002c67 	.word	0x08002c67
 8002c40:	08002c77 	.word	0x08002c77
 8002c44:	08002c77 	.word	0x08002c77
 8002c48:	08002c77 	.word	0x08002c77
 8002c4c:	08002c6f 	.word	0x08002c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c50:	f7ff fb38 	bl	80022c4 <HAL_RCC_GetPCLK1Freq>
 8002c54:	61b8      	str	r0, [r7, #24]
        break;
 8002c56:	e013      	b.n	8002c80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7ff fb56 	bl	8002308 <HAL_RCC_GetPCLK2Freq>
 8002c5c:	61b8      	str	r0, [r7, #24]
        break;
 8002c5e:	e00f      	b.n	8002c80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c60:	4b20      	ldr	r3, [pc, #128]	@ (8002ce4 <UART_SetConfig+0x268>)
 8002c62:	61bb      	str	r3, [r7, #24]
        break;
 8002c64:	e00c      	b.n	8002c80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c66:	f7ff facd 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 8002c6a:	61b8      	str	r0, [r7, #24]
        break;
 8002c6c:	e008      	b.n	8002c80 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c72:	61bb      	str	r3, [r7, #24]
        break;
 8002c74:	e004      	b.n	8002c80 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c7e:	bf00      	nop
    }

    if (pclk != 0U)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d018      	beq.n	8002cb8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	085a      	lsrs	r2, r3, #1
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	441a      	add	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b0f      	cmp	r3, #15
 8002c9e:	d909      	bls.n	8002cb4 <UART_SetConfig+0x238>
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca6:	d205      	bcs.n	8002cb4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	e001      	b.n	8002cb8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002cc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	efff69f3 	.word	0xefff69f3
 8002cd4:	40013800 	.word	0x40013800
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40004400 	.word	0x40004400
 8002ce0:	40004800 	.word	0x40004800
 8002ce4:	007a1200 	.word	0x007a1200

08002ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01a      	beq.n	8002dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002de6:	d10a      	bne.n	8002dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	605a      	str	r2, [r3, #4]
  }
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b098      	sub	sp, #96	@ 0x60
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e3c:	f7fd fca2 	bl	8000784 <HAL_GetTick>
 8002e40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d12e      	bne.n	8002eae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f88c 	bl	8002f7c <UART_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d021      	beq.n	8002eae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e6      	bne.n	8002e6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e062      	b.n	8002f74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d149      	bne.n	8002f50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ebc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f856 	bl	8002f7c <UART_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d03c      	beq.n	8002f50 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	623b      	str	r3, [r7, #32]
   return(result);
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ef6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002efc:	e841 2300 	strex	r3, r2, [r1]
 8002f00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e6      	bne.n	8002ed6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	e853 3f00 	ldrex	r3, [r3]
 8002f16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3308      	adds	r3, #8
 8002f26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f28:	61fa      	str	r2, [r7, #28]
 8002f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	69b9      	ldr	r1, [r7, #24]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	e841 2300 	strex	r3, r2, [r1]
 8002f34:	617b      	str	r3, [r7, #20]
   return(result);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e5      	bne.n	8002f08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e011      	b.n	8002f74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3758      	adds	r7, #88	@ 0x58
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f8c:	e04f      	b.n	800302e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d04b      	beq.n	800302e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fd fbf5 	bl	8000784 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <UART_WaitOnFlagUntilTimeout+0x30>
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e04e      	b.n	800304e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d037      	beq.n	800302e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b80      	cmp	r3, #128	@ 0x80
 8002fc2:	d034      	beq.n	800302e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b40      	cmp	r3, #64	@ 0x40
 8002fc8:	d031      	beq.n	800302e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d110      	bne.n	8002ffa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2208      	movs	r2, #8
 8002fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f8ff 	bl	80031e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2208      	movs	r2, #8
 8002fea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e029      	b.n	800304e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003008:	d111      	bne.n	800302e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f8e5 	bl	80031e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e00f      	b.n	800304e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4013      	ands	r3, r2
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	429a      	cmp	r2, r3
 800304a:	d0a0      	beq.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003058:	b480      	push	{r7}
 800305a:	b097      	sub	sp, #92	@ 0x5c
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800308a:	d10e      	bne.n	80030aa <UART_Start_Receive_IT+0x52>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <UART_Start_Receive_IT+0x48>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800309a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800309e:	e02d      	b.n	80030fc <UART_Start_Receive_IT+0xa4>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	22ff      	movs	r2, #255	@ 0xff
 80030a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80030a8:	e028      	b.n	80030fc <UART_Start_Receive_IT+0xa4>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10d      	bne.n	80030ce <UART_Start_Receive_IT+0x76>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <UART_Start_Receive_IT+0x6c>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	22ff      	movs	r2, #255	@ 0xff
 80030be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80030c2:	e01b      	b.n	80030fc <UART_Start_Receive_IT+0xa4>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	227f      	movs	r2, #127	@ 0x7f
 80030c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80030cc:	e016      	b.n	80030fc <UART_Start_Receive_IT+0xa4>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030d6:	d10d      	bne.n	80030f4 <UART_Start_Receive_IT+0x9c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <UART_Start_Receive_IT+0x92>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	227f      	movs	r2, #127	@ 0x7f
 80030e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80030e8:	e008      	b.n	80030fc <UART_Start_Receive_IT+0xa4>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	223f      	movs	r2, #63	@ 0x3f
 80030ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80030f2:	e003      	b.n	80030fc <UART_Start_Receive_IT+0xa4>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2222      	movs	r2, #34	@ 0x22
 8003108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3308      	adds	r3, #8
 8003112:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003116:	e853 3f00 	ldrex	r3, [r3]
 800311a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800311c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	657b      	str	r3, [r7, #84]	@ 0x54
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3308      	adds	r3, #8
 800312a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800312c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800312e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003130:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003132:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003134:	e841 2300 	strex	r3, r2, [r1]
 8003138:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800313a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1e5      	bne.n	800310c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003148:	d107      	bne.n	800315a <UART_Start_Receive_IT+0x102>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a21      	ldr	r2, [pc, #132]	@ (80031dc <UART_Start_Receive_IT+0x184>)
 8003156:	669a      	str	r2, [r3, #104]	@ 0x68
 8003158:	e002      	b.n	8003160 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4a20      	ldr	r2, [pc, #128]	@ (80031e0 <UART_Start_Receive_IT+0x188>)
 800315e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d019      	beq.n	800319c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800317c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003186:	637b      	str	r3, [r7, #52]	@ 0x34
 8003188:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800318c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800318e:	e841 2300 	strex	r3, r2, [r1]
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e6      	bne.n	8003168 <UART_Start_Receive_IT+0x110>
 800319a:	e018      	b.n	80031ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	613b      	str	r3, [r7, #16]
   return(result);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f043 0320 	orr.w	r3, r3, #32
 80031b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	69f9      	ldr	r1, [r7, #28]
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e6      	bne.n	800319c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	375c      	adds	r7, #92	@ 0x5c
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	080034d5 	.word	0x080034d5
 80031e0:	0800332d 	.word	0x0800332d

080031e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b095      	sub	sp, #84	@ 0x54
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003200:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800320a:	643b      	str	r3, [r7, #64]	@ 0x40
 800320c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003210:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e6      	bne.n	80031ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3308      	adds	r3, #8
 8003224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	61fb      	str	r3, [r7, #28]
   return(result);
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3308      	adds	r3, #8
 800323c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800323e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e5      	bne.n	800321e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003256:	2b01      	cmp	r3, #1
 8003258:	d118      	bne.n	800328c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	60bb      	str	r3, [r7, #8]
   return(result);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f023 0310 	bic.w	r3, r3, #16
 800326e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6979      	ldr	r1, [r7, #20]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	613b      	str	r3, [r7, #16]
   return(result);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e6      	bne.n	800325a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80032a0:	bf00      	nop
 80032a2:	3754      	adds	r7, #84	@ 0x54
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fbc0 	bl	8002a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	6979      	ldr	r1, [r7, #20]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	613b      	str	r3, [r7, #16]
   return(result);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e6      	bne.n	80032e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff fb8c 	bl	8002a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003324:	bf00      	nop
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b09c      	sub	sp, #112	@ 0x70
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800333a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003344:	2b22      	cmp	r3, #34	@ 0x22
 8003346:	f040 80b9 	bne.w	80034bc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003350:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003354:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003358:	b2d9      	uxtb	r1, r3
 800335a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800335e:	b2da      	uxtb	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003364:	400a      	ands	r2, r1
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 809c 	bne.w	80034cc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e6      	bne.n	8003394 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3308      	adds	r3, #8
 80033cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3308      	adds	r3, #8
 80033e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80033e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80033e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e5      	bne.n	80033c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d018      	beq.n	800344e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	e853 3f00 	ldrex	r3, [r3]
 8003428:	623b      	str	r3, [r7, #32]
   return(result);
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003430:	663b      	str	r3, [r7, #96]	@ 0x60
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800343a:	633b      	str	r3, [r7, #48]	@ 0x30
 800343c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e6      	bne.n	800341c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003452:	2b01      	cmp	r3, #1
 8003454:	d12e      	bne.n	80034b4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	60fb      	str	r3, [r7, #12]
   return(result);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f023 0310 	bic.w	r3, r3, #16
 8003470:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	69b9      	ldr	r1, [r7, #24]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	617b      	str	r3, [r7, #20]
   return(result);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e6      	bne.n	800345c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b10      	cmp	r3, #16
 800349a:	d103      	bne.n	80034a4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2210      	movs	r2, #16
 80034a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fad9 	bl	8002a64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80034b2:	e00b      	b.n	80034cc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fc ffd3 	bl	8000460 <HAL_UART_RxCpltCallback>
}
 80034ba:	e007      	b.n	80034cc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0208 	orr.w	r2, r2, #8
 80034ca:	619a      	str	r2, [r3, #24]
}
 80034cc:	bf00      	nop
 80034ce:	3770      	adds	r7, #112	@ 0x70
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b09c      	sub	sp, #112	@ 0x70
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80034e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ec:	2b22      	cmp	r3, #34	@ 0x22
 80034ee:	f040 80b9 	bne.w	8003664 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80034f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003500:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003502:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003506:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800350a:	4013      	ands	r3, r2
 800350c:	b29a      	uxth	r2, r3
 800350e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003510:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003516:	1c9a      	adds	r2, r3, #2
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 809c 	bne.w	8003674 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800354a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800354c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003550:	667b      	str	r3, [r7, #100]	@ 0x64
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800355a:	657b      	str	r3, [r7, #84]	@ 0x54
 800355c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003560:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e6      	bne.n	800353c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3308      	adds	r3, #8
 8003574:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	663b      	str	r3, [r7, #96]	@ 0x60
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3308      	adds	r3, #8
 800358c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800358e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003590:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003594:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800359c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e5      	bne.n	800356e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d018      	beq.n	80035f6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e6      	bne.n	80035c4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d12e      	bne.n	800365c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	60bb      	str	r3, [r7, #8]
   return(result);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f023 0310 	bic.w	r3, r3, #16
 8003618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6979      	ldr	r1, [r7, #20]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	613b      	str	r3, [r7, #16]
   return(result);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e6      	bne.n	8003604 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b10      	cmp	r3, #16
 8003642:	d103      	bne.n	800364c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2210      	movs	r2, #16
 800364a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff fa05 	bl	8002a64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800365a:	e00b      	b.n	8003674 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fc feff 	bl	8000460 <HAL_UART_RxCpltCallback>
}
 8003662:	e007      	b.n	8003674 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0208 	orr.w	r2, r2, #8
 8003672:	619a      	str	r2, [r3, #24]
}
 8003674:	bf00      	nop
 8003676:	3770      	adds	r7, #112	@ 0x70
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <memset>:
 8003690:	4402      	add	r2, r0
 8003692:	4603      	mov	r3, r0
 8003694:	4293      	cmp	r3, r2
 8003696:	d100      	bne.n	800369a <memset+0xa>
 8003698:	4770      	bx	lr
 800369a:	f803 1b01 	strb.w	r1, [r3], #1
 800369e:	e7f9      	b.n	8003694 <memset+0x4>

080036a0 <strncmp>:
 80036a0:	b510      	push	{r4, lr}
 80036a2:	b16a      	cbz	r2, 80036c0 <strncmp+0x20>
 80036a4:	3901      	subs	r1, #1
 80036a6:	1884      	adds	r4, r0, r2
 80036a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d103      	bne.n	80036bc <strncmp+0x1c>
 80036b4:	42a0      	cmp	r0, r4
 80036b6:	d001      	beq.n	80036bc <strncmp+0x1c>
 80036b8:	2a00      	cmp	r2, #0
 80036ba:	d1f5      	bne.n	80036a8 <strncmp+0x8>
 80036bc:	1ad0      	subs	r0, r2, r3
 80036be:	bd10      	pop	{r4, pc}
 80036c0:	4610      	mov	r0, r2
 80036c2:	e7fc      	b.n	80036be <strncmp+0x1e>

080036c4 <__libc_init_array>:
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	4d0d      	ldr	r5, [pc, #52]	@ (80036fc <__libc_init_array+0x38>)
 80036c8:	4c0d      	ldr	r4, [pc, #52]	@ (8003700 <__libc_init_array+0x3c>)
 80036ca:	1b64      	subs	r4, r4, r5
 80036cc:	10a4      	asrs	r4, r4, #2
 80036ce:	2600      	movs	r6, #0
 80036d0:	42a6      	cmp	r6, r4
 80036d2:	d109      	bne.n	80036e8 <__libc_init_array+0x24>
 80036d4:	4d0b      	ldr	r5, [pc, #44]	@ (8003704 <__libc_init_array+0x40>)
 80036d6:	4c0c      	ldr	r4, [pc, #48]	@ (8003708 <__libc_init_array+0x44>)
 80036d8:	f000 f818 	bl	800370c <_init>
 80036dc:	1b64      	subs	r4, r4, r5
 80036de:	10a4      	asrs	r4, r4, #2
 80036e0:	2600      	movs	r6, #0
 80036e2:	42a6      	cmp	r6, r4
 80036e4:	d105      	bne.n	80036f2 <__libc_init_array+0x2e>
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ec:	4798      	blx	r3
 80036ee:	3601      	adds	r6, #1
 80036f0:	e7ee      	b.n	80036d0 <__libc_init_array+0xc>
 80036f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f6:	4798      	blx	r3
 80036f8:	3601      	adds	r6, #1
 80036fa:	e7f2      	b.n	80036e2 <__libc_init_array+0x1e>
 80036fc:	08003774 	.word	0x08003774
 8003700:	08003774 	.word	0x08003774
 8003704:	08003774 	.word	0x08003774
 8003708:	08003778 	.word	0x08003778

0800370c <_init>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr

08003718 <_fini>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	bf00      	nop
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr
